#!/usr/bin/perl
#
# Copyright (C) 2013-2016 Oliver Hitz <oliver@net-track.ch>
#

=head1 NAME

ifload

=head1 SYNOPSIS

ifload [OPTIONS] I<INTERFACE> [I<AVG-SECS>]

=head1 OPTIONS

=over

=item B<--help>

Show help message.

=item B<--pps>

Also show packets per second.

=back

=head1 ARGUMENTS

=over

=item I<INTERFACE>

Specifies the interface to show.

=item I<AVG-SECS>

Optional parameter specifying the number of seconds to average, default 1.

=back

=head1 DESCRIPTION

B<ifload> shows the used bandwidth and packets per second of the
specified network interface in real time.

=head1 AUTHOR

B<ifload> was written by Oliver Hitz <oliver@net-track.ch>.

=head1 LICENSE

Licensed under The MIT License.

=cut
    
use Pod::Usage;
use Getopt::Long;
use strict;

$|=1;

my $cfg_pps;
my $cfg_help;

if (!GetOptions("help" => \$cfg_help,
                "pps" => \$cfg_pps)) {
  print pod2usage(-verbose => 1);
  exit 1;
}

if ($cfg_help) {
  print pod2usage(-verbose => 2);
  exit 0;
}

if ($#ARGV < 0 || $#ARGV > 1) {
  print pod2usage(-verbose => 0);
  exit 1;
}

my $interface = shift @ARGV;
my $seconds = 1;
if ($#ARGV == 0) {
  $seconds = int(shift @ARGV);
}
if ($seconds < 1) {
  $seconds = 1;
}

my @hist;
push @hist, [ get_counters($interface) ];

while (1) {
  sleep 1;

  my @cur = get_counters($interface);
  push @hist, [ @cur ];
  
  $cur[0] -= $hist[0][0];
  $cur[1] -= $hist[0][1];
  $cur[2] -= $hist[0][2];
  $cur[3] -= $hist[0][3];

  print "\r\x1b[K";

  my $bw_in = sprintf("%d", int(($cur[0] * 8) / ($#hist*1024*1024)));
  my $bw_out = sprintf("%d", int(($cur[1] * 8) / ($#hist*1024*1024)));

  my $kpps_in = sprintf("%d", int($cur[2]/($#hist*1000)));
  my $kpps_out = sprintf("%d", int($cur[3]/($#hist*1000)));

  if ($cfg_pps) {
      printf("in: %4s mbps (%3s kpps), out: %4s mbps (%3s kpps)",
             $bw_in,
             $kpps_in,
             $bw_out,
             $kpps_out);
  } else {
      printf("in: %4s mbps, out: %4s mbps",
             $bw_in,
             $bw_out);
  }
  
  if ($#hist == $seconds) {
    shift @hist;
  }
}

sub get_counters()
{
  my $if = shift;

  open N, "/proc/net/dev";
  while (my $li = <N>) {
    if ($li =~ /^\s*($if):\s*(.*)$/) {
      my @data = split /\s+/, $2;
      close N;
      return ($data[0], $data[8], $data[1], $data[9]);
    }
  }
  close N;

  return (0, 0, 0, 0); 
}

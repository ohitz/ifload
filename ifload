#!/usr/bin/perl
#
# Copyright (C) 2013-2016 Oliver Hitz <oliver@net-track.ch>
#

=head1 NAME

ifload

=head1 SYNOPSIS

ifload [OPTIONS] I<INTERFACE>

=head1 OPTIONS

=over

=item B<--help>

Show help message.

=item B<--pps>

Add real-time packets per second.

=item B<--avg>=I<SECS>

Add I<SECS> seconds average.

=back

=head1 ARGUMENTS

=over

=item I<INTERFACE>

Specifies the interface to show.

=back

=head1 DESCRIPTION

B<ifload> shows the used bandwidth and packets per second of the
specified network interface in real time.

=head1 AUTHOR

B<ifload> was written by Oliver Hitz <oliver@net-track.ch>.

=head1 LICENSE

Licensed under The MIT License.

=cut
    
use Pod::Usage;
use Getopt::Long;
use strict;

$|=1;

my $cfg_pps;
my $cfg_help;
my $cfg_avg = 1;

if (!GetOptions("help" => \$cfg_help,
                "pps" => \$cfg_pps,
                "avg=i" => \$cfg_avg)) {
  print pod2usage(-verbose => 1);
  exit 1;
}

if ($cfg_help) {
  print pod2usage(-verbose => 2);
  exit 0;
}

if ($#ARGV != 0) {
  print pod2usage(-verbose => 0);
  exit 1;
}

my $interface = shift @ARGV;

my @hist;
push @hist, [ get_counters($interface) ];

while (1) {
  sleep 1;

  my @cur = get_counters($interface);
  push @hist, [ @cur ];

  # real time bandwith (1s avg)
  my @bw_rt = ( int(8 * ($cur[0] - $hist[$#hist-1][0]) / (1024*1024)),
                int(8 * ($cur[1] - $hist[$#hist-1][1]) / (1024*1024)) );

  # real time pps (1s avg)
  my @pps_rt = ( ($cur[2] - $hist[$#hist-1][2]) / 1000,
                 ($cur[3] - $hist[$#hist-1][3]) / 1000 );

  # avg bandwidth
  my @bw_avg = ( int(8 * ($cur[0] - $hist[0][0]) / ($#hist*1024*1024)),
                 int(8 * ($cur[1] - $hist[0][1]) / ($#hist*1024*1024)) );

  print "\r\x1b[K";

  my @output;
  push @output, sprintf("%4d/%4d mbps", $bw_rt[0], $bw_rt[1]);
  if ($cfg_avg > 1) {
    push @output, sprintf("%4d/%4d mbps (%ds avg)", $bw_avg[0], $bw_avg[1], $#hist);
  }
  if ($cfg_pps) {
    push @output, sprintf("%4d/%4d kpps", $pps_rt[0], $pps_rt[1]);
  }

  printf("%s (in/out): %s",
         $interface,
         join " | ", @output);    
  
  if ($#hist == $cfg_avg) {
    shift @hist;
  }
}

sub get_counters()
{
  my $if = shift;

  open N, "/proc/net/dev";
  while (my $li = <N>) {
    if ($li =~ /^\s*($if):\s*(.*)$/) {
      my @data = split /\s+/, $2;
      close N;
      return ($data[0], $data[8], $data[1], $data[9]);
    }
  }
  close N;

  return (0, 0, 0, 0); 
}
